class HashTableOpenAddressing {
private:
    std::string* keys;
    std::vector<std::string>* values;
    int* status; // 0=empty, 1=occupied, 2=deleted
    int capacity;
    int size;

    int hash(const string& key, int cap) {
        int hashValue = 0;
        for (char c : key) {
            hashValue = (hashValue * 31 + c) % cap;
        }
        return hashValue;
    }

    int probe(int hashValue, int step, int cap) {
        return (hashValue + step) % cap;
    }

    void resize() {
        int newCapacity = capacity * 2;
        string* newKeys = new string[newCapacity];
        vector<string>* newValues = new vector<string>[newCapacity];
        int* newStatus = new int[newCapacity];

        for (int i = 0; i < newCapacity; i++) {
            newStatus[i] = 0; // inicializar vacÃ­o
        }

        for (int i = 0; i < capacity; i++) {
            if (status[i] == 1) {
                int hashValue = hash(keys[i], newCapacity);
                int step = 0;
                while (newStatus[hashValue] == 1) {
                    hashValue = probe(hashValue, ++step, newCapacity);
                }
                newKeys[hashValue] = keys[i];
                newValues[hashValue] = values[i];
                newStatus[hashValue] = 1;
            }
        }

        delete[] keys;
        delete[] values;
        delete[] status;
        keys = newKeys;
        values = newValues;
        status = newStatus;
        capacity = newCapacity;
    }

public:
    HashTableOpenAddressing(int cap) : capacity(cap), size(0) {
        keys = new string[capacity];
        values = new vector<string>[capacity];
        status = new int[capacity];
        for (int i = 0; i < capacity; i++) {
            status[i] = 0; // empty
        }
    }

    ~HashTableOpenAddressing() {
        delete[] keys;
        delete[] values;
        delete[] status;
    }

    void insert(const string& key, const string& value) {
        if (size >= capacity * 0.7) {
            resize();
        }

        int hashValue = hash(key, capacity);
        int step = 0;

        while (status[hashValue] == 1) {
            if (keys[hashValue] == key) {
                values[hashValue].push_back(value);
                return;
            }
            hashValue = probe(hashValue, ++step, capacity);
        }

        keys[hashValue] = key;
        values[hashValue].push_back(value);
        status[hashValue] = 1;
        size++;
    }

    vector<string>* search(const string& key) {
        int hashValue = hash(key, capacity);
        int step = 0;
        while (status[hashValue] != 0) {
            if (status[hashValue] == 1 && keys[hashValue] == key) {
                return &values[hashValue];
            }
            hashValue = probe(hashValue, ++step, capacity);
        }
        return nullptr;
    }

    vector<vector<string>> getValues() {
        vector<vector<string>> result;
        for (int i = 0; i < capacity; i++) {
            if (status[i] == 1) {
                result.push_back(values[i]);
            }
        }
        return result;
    }
};

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        HashTableOpenAddressing hashTable(100); //capacidad inicial

        for (const string& str : strs) {
            string sortedStr = str;
            sort(sortedStr.begin(), sortedStr.end());
            vector<string>* anagrams = hashTable.search(sortedStr);
            if (anagrams != nullptr) {
                anagrams->push_back(str);
            } else {
                hashTable.insert(sortedStr, str);
            }
        }

        return hashTable.getValues(); //valores agrupados
    }
};
